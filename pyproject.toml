[build-system]
requires = ["setuptools>=40.1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vlmrun-hub"
description = "VLM Run Hub for various industry-specific schemas"
authors = [{name = "VLM Support", email = "support@vlm.com"}]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research","Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
license = {text = "Apache-2.0"}
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
homepage = "https://github.com/vlm-run/vlmrun-hub"
repository = "https://github.com/vlm-run/vlmrun-hub"
documentation = "https://docs.vlm.run/hub"

[pytest]
log_cli = true
log_cli_level = "INFO"

[tool.pytest.ini_options]
addopts = "--show-capture=no -sv -m 'not (skip) and not (benchmark)' -p no:warnings"
markers = [
    "skip: Skip test",
    "benchmark: Benchmark tests",
]

[tool.setuptools.dynamic]
version = {attr = "vlmrun.hub.version.__version__"}
dependencies = {file = ["requirements/requirements.txt"]}

    [tool.setuptools.dynamic.optional-dependencies]
    test = {file = ["requirements/requirements.test.txt"]}
    build = {file = ["requirements/requirements.build.txt"]}
    extra = {file = ["requirements/requirements.extra.txt"]}
    all = {file = ["requirements/requirements.test.txt", "requirements/requirements.build.txt", "requirements/requirements.extra.txt"]}

[tool.setuptools.packages.find]
where = ["."]
include = ["vlmrun.hub"]

[tool.black]
line-length = 120

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
lint.ignore = [
    "E501",  # E501: Line too long
    "C901",  # C901: Function is too complex
    "B008",  # do not perform function calls in argument defaults
    "B904",  # B904: check for raise from None
]
